#include "Python.h"
#include "C_arr.h"



static C_arr 
PyListD_GetList(PyObject *self, PyObject *args) {
    int        n, idx, isFloat, isLong;
    double     C_list_itm;
    PyObject   *Py_list = NULL, *Py_list_itm = NULL;
    C_arr      C_array = {-1, NULL};
    
    
    if ( (PyArg_ParseTuple(args, "O", &Py_list)) && PyList_Check(Py_list) ) {
        
        n = PyObject_Length(Py_list);
        C_array.len = n;
    
    C_array.C_list = (double *) malloc( n*sizeof(double) );

        for(idx = 0; idx < n; idx++) {
            
            Py_list_itm = PyList_GetItem(Py_list, idx);
            Py_XINCREF(Py_list_itm);
            isFloat     = PyFloat_Check(Py_list_itm);
            
            if ( isFloat > 0 ) {
                C_list_itm = PyFloat_AsDouble(Py_list_itm);
                 Py_DECREF(Py_list_itm);
                C_array.C_list[idx] = C_list_itm;
            }
            else {
                PyErr_Clear();
                isLong = PyLong_Check(Py_list_itm);
                if (isLong) {
                    C_list_itm = PyLong_AsDouble(Py_list_itm); 
                    C_array.C_list[idx] = C_list_itm;
                    Py_DECREF(Py_list_itm);
                }
                else{
                    Py_DECREF(Py_list_itm);
                    Py_DECREF(Py_list);
                    free(C_array.C_list); 
                    printf("Error in PyList_DGetList type check...");
                    return  C_array;                    
                }
            }
        } 
        

        printf("Exiting PyListD_GetList...\n");
        return C_array;

    }
    else {
        
        return C_array;
    }
}